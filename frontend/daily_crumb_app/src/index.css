/*
! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  /* 3 */
  tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden] {
  display: none;
}

:where(:root),
:root:has(input.theme-controller[value=light]:checked),
[data-theme=light] {
  color-scheme: light;
  --color-base-100: oklch(100% 0 0);
  --color-base-200: oklch(97.8% 0.005 297.73);
  --color-base-300: oklch(37.01% 0.0069 297.49);
  --color-base-content: oklch(37.57% 0.022 281.8);
  --color-primary: oklch(57.59% 0.247 287.24);
  --color-primary-content: oklch(96.57% 0.017 289.61);
  --color-secondary: oklch(55.79% 0.022 301.91);
  --color-secondary-content: oklch(97.64% 0.001 286.38);
  --color-accent: oklch(62.31% 0.188 259.81);
  --color-accent-content: oklch(97.05% 0.014 254.6);
  --color-neutral: oklch(37.57% 0.0222 281.8);
  --color-neutral-content: oklch(0.98 0.0013 286.38);
  --color-info: oklch(71.48% 0.126 215.22);
  --color-info-content: oklch(98.41% 0.019 200.87);
  --color-success: oklch(73.11% 0.217 147.04);
  --color-success-content: oklch(98.1% 0.014 174.18);
  --color-warning: oklch(79.87% 0.164 73.09);
  --color-warning-content: oklch(99.34% 0.011 95.16);
  --color-error: oklch(65.39% 0.222 25.86);
  --color-error-content: oklch(98.76% 0.009 67.73);
  --radius-selector: 0.25rem;
  --radius-field: 0.375rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}

@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;
    --color-base-100: oklch(31.23% 0.026 301.24);
    --color-base-200: oklch(25.39% 0.025 298.72);
    --color-base-300: oklch(23.44% 0.0194 298.63);
    --color-base-content: oklch(84.98% 0.014 295.28);
    --color-primary: oklch(53.93% 0.271 286.75);
    --color-primary-content: oklch(88.22% 0.062 290.17);
    --color-secondary: oklch(49.12% 0.021 303.05);
    --color-secondary-content: oklch(88.83% 0.007 304.23);
    --color-accent: oklch(54.61% 0.215 262.88);
    --color-accent-content: oklch(88.23% 0.057 254.13);
    --color-neutral: oklch(65.75% 0.022 294.95);
    --color-neutral-content: oklch(18.51% 0.017 301.92);
    --color-info: oklch(60.89% 0.111 221.72);
    --color-info-content: oklch(91.67% 0.077 205.04);
    --color-success: oklch(67.35% 0.201 146.84);
    --color-success-content: oklch(91.38% 0.069 168.24);
    --color-warning: oklch(72.59% 0.152 69.05);
    --color-warning-content: oklch(96.07% 0.057 93.2);
    --color-error: oklch(59.54% 0.208 26.28);
    --color-error-content: oklch(93.4% 0.039 54.86);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}

:root:has(input.theme-controller[value=light]:checked),
[data-theme=light] {
  color-scheme: light;
  --color-base-100: oklch(100% 0 0);
  --color-base-200: oklch(97.8% 0.005 297.73);
  --color-base-300: oklch(37.01% 0.0069 297.49);
  --color-base-content: oklch(37.57% 0.022 281.8);
  --color-primary: oklch(57.59% 0.247 287.24);
  --color-primary-content: oklch(96.57% 0.017 289.61);
  --color-secondary: oklch(55.79% 0.022 301.91);
  --color-secondary-content: oklch(97.64% 0.001 286.38);
  --color-accent: oklch(62.31% 0.188 259.81);
  --color-accent-content: oklch(97.05% 0.014 254.6);
  --color-neutral: oklch(37.57% 0.0222 281.8);
  --color-neutral-content: oklch(0.98 0.0013 286.38);
  --color-info: oklch(71.48% 0.126 215.22);
  --color-info-content: oklch(98.41% 0.019 200.87);
  --color-success: oklch(73.11% 0.217 147.04);
  --color-success-content: oklch(98.1% 0.014 174.18);
  --color-warning: oklch(79.87% 0.164 73.09);
  --color-warning-content: oklch(99.34% 0.011 95.16);
  --color-error: oklch(65.39% 0.222 25.86);
  --color-error-content: oklch(98.76% 0.009 67.73);
  --radius-selector: 0.25rem;
  --radius-field: 0.375rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}

:root:has(input.theme-controller[value=dark]:checked),
[data-theme=dark] {
  color-scheme: dark;
  --color-base-100: oklch(31.23% 0.026 301.24);
  --color-base-200: oklch(25.39% 0.025 298.72);
  --color-base-300: oklch(23.44% 0.0194 298.63);
  --color-base-content: oklch(84.98% 0.014 295.28);
  --color-primary: oklch(53.93% 0.271 286.75);
  --color-primary-content: oklch(88.22% 0.062 290.17);
  --color-secondary: oklch(49.12% 0.021 303.05);
  --color-secondary-content: oklch(88.83% 0.007 304.23);
  --color-accent: oklch(54.61% 0.215 262.88);
  --color-accent-content: oklch(88.23% 0.057 254.13);
  --color-neutral: oklch(65.75% 0.022 294.95);
  --color-neutral-content: oklch(18.51% 0.017 301.92);
  --color-info: oklch(60.89% 0.111 221.72);
  --color-info-content: oklch(91.67% 0.077 205.04);
  --color-success: oklch(67.35% 0.201 146.84);
  --color-success-content: oklch(91.38% 0.069 168.24);
  --color-warning: oklch(72.59% 0.152 69.05);
  --color-warning-content: oklch(96.07% 0.057 93.2);
  --color-error: oklch(59.54% 0.208 26.28);
  --color-error-content: oklch(93.4% 0.039 54.86);
  --radius-selector: 0.25rem;
  --radius-field: 0.375rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}

:root,
[data-theme] {
  background-color: var(--root-bg, var(--color-base-100));
  color: var(--color-base-content);
}

:root {
  --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
}

@property --radialprogress {
  syntax: "<percentage>";

  inherits: true;

  initial-value: 0%;
}

button:not(:disabled),
[role="button"]:not(:disabled) {
  cursor: pointer;
}

:root {
  scrollbar-color: color-mix(in oklch, currentColor 20%, #0000) #0000;
}

*,
::before,
::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x: ;
  --tw-pan-y: ;
  --tw-pinch-zoom: ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position: ;
  --tw-gradient-via-position: ;
  --tw-gradient-to-position: ;
  --tw-ordinal: ;
  --tw-slashed-zero: ;
  --tw-numeric-figure: ;
  --tw-numeric-spacing: ;
  --tw-numeric-fraction: ;
  --tw-ring-inset: ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur: ;
  --tw-brightness: ;
  --tw-contrast: ;
  --tw-grayscale: ;
  --tw-hue-rotate: ;
  --tw-invert: ;
  --tw-saturate: ;
  --tw-sepia: ;
  --tw-drop-shadow: ;
  --tw-backdrop-blur: ;
  --tw-backdrop-brightness: ;
  --tw-backdrop-contrast: ;
  --tw-backdrop-grayscale: ;
  --tw-backdrop-hue-rotate: ;
  --tw-backdrop-invert: ;
  --tw-backdrop-opacity: ;
  --tw-backdrop-saturate: ;
  --tw-backdrop-sepia: ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x: ;
  --tw-pan-y: ;
  --tw-pinch-zoom: ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position: ;
  --tw-gradient-via-position: ;
  --tw-gradient-to-position: ;
  --tw-ordinal: ;
  --tw-slashed-zero: ;
  --tw-numeric-figure: ;
  --tw-numeric-spacing: ;
  --tw-numeric-fraction: ;
  --tw-ring-inset: ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur: ;
  --tw-brightness: ;
  --tw-contrast: ;
  --tw-grayscale: ;
  --tw-hue-rotate: ;
  --tw-invert: ;
  --tw-saturate: ;
  --tw-sepia: ;
  --tw-drop-shadow: ;
  --tw-backdrop-blur: ;
  --tw-backdrop-brightness: ;
  --tw-backdrop-contrast: ;
  --tw-backdrop-grayscale: ;
  --tw-backdrop-hue-rotate: ;
  --tw-backdrop-invert: ;
  --tw-backdrop-opacity: ;
  --tw-backdrop-saturate: ;
  --tw-backdrop-sepia: ;
}

.range.disabled,
.range:disabled,
.range[disabled] {
  pointer-events: none;
  opacity: 50%;
}

.progress {
  display: flex;
  height: calc(0.25rem * 1.5);
  width: 100%;
  overflow: hidden;
  border-radius: var(--radius-box);
  background-color: var(--color-base-200);
}

@keyframes indeterminate-progress {
  0% {
    background-position-x: -75%;
  }

  50% {
    background-position-x: 125%;
  }

  100% {
    background-position-x: -75%;
  }
}

@keyframes progress-bar-stripes {
  0% {
    background-position-x: 0.75rem;
  }
}

.input>.select {
  height: auto;
  border-style: var(--tw-border-style);
  border-width: 0px;
}

.input>.select:focus,
.input>.select:focus-within {
  --tw-shadow: 0 0 #0000;
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  outline-style: var(--tw-outline-style);
  outline-width: 0px;
}

.radio {
  position: relative;
  flex-shrink: 0;
  cursor: pointer;
  appearance: none;
  border-radius: calc(infinity * 1px);
  padding: calc(0.25rem * 1);
  vertical-align: middle;
  border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: var(--size);
  height: var(--size);
  color: var(--input-color, var(--color-neutral));
}

.radio:before {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: calc(infinity * 1px);
  --tw-content: "";
  content: var(--tw-content);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
}

.radio:focus-visible {
  outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
  outline-offset: 0px;
}

.radio:checked,
.radio[aria-checked="true"] {
  animation: radio 0.2s ease-out;
  border-color: currentColor;
  background-color: var(--color-base-100);
  box-shadow: 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 30%, #0000);
}

.radio:checked:before,
.radio[aria-checked="true"]:before {
  background-color: currentColor;
  box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
}

@media (forced-colors: active) {

  .radio:checked:before,
  .radio[aria-checked="true"]:before {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
    outline-offset: calc(1px * -1);
  }
}

@media print {

  .radio:checked:before,
  .radio[aria-checked="true"]:before {
    outline: 0.25rem solid;
    outline-offset: -1rem;
  }
}

.radio:disabled {
  cursor: not-allowed;
  opacity: 50%;
}

@keyframes radio {
  0% {
    padding: 5px;
  }

  50% {
    padding: 3px;
  }
}

@keyframes radio-inset {
  0% {
    padding: 1px;
  }

  50% {
    padding: 4px;
  }
}

.link.disabled,
.link[disabled],
.link:disabled {
  pointer-events: none;
  opacity: 50%;
}

.carousel-prev.disabled,
.carousel-next.disabled {
  pointer-events: none;
}

.pin-input.disabled,
.pin-input:disabled,
.pin-input[disabled] {
  pointer-events: none;
  border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
  background-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
}

.pin-input.disabled::placeholder,
.pin-input:disabled::placeholder,
.pin-input[disabled]::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
}

.input.is-valid,
.input:has(.is-valid),
.validate .input:valid,
.validate .input:has(:valid),
.select.is-valid,
.select:has(.is-valid),
.validate .select:valid,
.validate .select:has(:valid),
.textarea.is-valid,
.textarea:has(.is-valid),
.validate .textarea:valid,
.validate .textarea:has(:valid) {
  border-color: var(--color-success);
}

@media (hover: hover) {

  .input.is-valid:hover,
  .input:has(.is-valid):hover,
  .validate .input:valid:hover,
  .validate .input:has(:valid):hover,
  .select.is-valid:hover,
  .select:has(.is-valid):hover,
  .validate .select:valid:hover,
  .validate .select:has(:valid):hover,
  .textarea.is-valid:hover,
  .textarea:has(.is-valid):hover,
  .validate .textarea:valid:hover,
  .validate .textarea:has(:valid):hover {
    border-color: var(--color-success);
  }
}

.input.is-valid:has(:hover):not(:focus, :focus-within),
.input:has(.is-valid):has(:hover):not(:focus, :focus-within),
.validate .input:valid:has(:hover):not(:focus, :focus-within),
.validate .input:has(:valid):has(:hover):not(:focus, :focus-within),
.select.is-valid:has(:hover):not(:focus, :focus-within),
.select:has(.is-valid):has(:hover):not(:focus, :focus-within),
.validate .select:valid:has(:hover):not(:focus, :focus-within),
.validate .select:has(:valid):has(:hover):not(:focus, :focus-within),
.textarea.is-valid:has(:hover):not(:focus, :focus-within),
.textarea:has(.is-valid):has(:hover):not(:focus, :focus-within),
.validate .textarea:valid:has(:hover):not(:focus, :focus-within),
.validate .textarea:has(:valid):has(:hover):not(:focus, :focus-within) {
  border-color: var(--color-success);
}

.input.is-valid:focus,
.input.is-valid:focus-within,
.input:has(.is-valid):focus,
.input:has(.is-valid):focus-within,
.validate .input:valid:focus,
.validate .input:valid:focus-within,
.validate .input:has(:valid):focus,
.validate .input:has(:valid):focus-within,
.select.is-valid:focus,
.select.is-valid:focus-within,
.select:has(.is-valid):focus,
.select:has(.is-valid):focus-within,
.validate .select:valid:focus,
.validate .select:valid:focus-within,
.validate .select:has(:valid):focus,
.validate .select:has(:valid):focus-within,
.textarea.is-valid:focus,
.textarea.is-valid:focus-within,
.textarea:has(.is-valid):focus,
.textarea:has(.is-valid):focus-within,
.validate .textarea:valid:focus,
.validate .textarea:valid:focus-within,
.validate .textarea:has(:valid):focus,
.validate .textarea:has(:valid):focus-within {
  --input-color: var(--color-success);
}

.input.is-invalid,
.input:has(.is-invalid),
.validate .input:invalid,
.validate .input:has(:invalid),
.select.is-invalid,
.select:has(.is-invalid),
.validate .select:invalid,
.validate .select:has(:invalid),
.textarea.is-invalid,
.textarea:has(.is-invalid),
.validate .textarea:invalid,
.validate .textarea:has(:invalid) {
  border-color: var(--color-error);
}

@media (hover: hover) {

  .input.is-invalid:hover,
  .input:has(.is-invalid):hover,
  .validate .input:invalid:hover,
  .validate .input:has(:invalid):hover,
  .select.is-invalid:hover,
  .select:has(.is-invalid):hover,
  .validate .select:invalid:hover,
  .validate .select:has(:invalid):hover,
  .textarea.is-invalid:hover,
  .textarea:has(.is-invalid):hover,
  .validate .textarea:invalid:hover,
  .validate .textarea:has(:invalid):hover {
    border-color: var(--color-error);
  }
}

.input.is-invalid:has(:hover):not(:focus, :focus-within),
.input:has(.is-invalid):has(:hover):not(:focus, :focus-within),
.validate .input:invalid:has(:hover):not(:focus, :focus-within),
.validate .input:has(:invalid):has(:hover):not(:focus, :focus-within),
.select.is-invalid:has(:hover):not(:focus, :focus-within),
.select:has(.is-invalid):has(:hover):not(:focus, :focus-within),
.validate .select:invalid:has(:hover):not(:focus, :focus-within),
.validate .select:has(:invalid):has(:hover):not(:focus, :focus-within),
.textarea.is-invalid:has(:hover):not(:focus, :focus-within),
.textarea:has(.is-invalid):has(:hover):not(:focus, :focus-within),
.validate .textarea:invalid:has(:hover):not(:focus, :focus-within),
.validate .textarea:has(:invalid):has(:hover):not(:focus, :focus-within) {
  border-color: var(--color-error);
}

.input.is-invalid:focus,
.input.is-invalid:focus-within,
.input:has(.is-invalid):focus,
.input:has(.is-invalid):focus-within,
.validate .input:invalid:focus,
.validate .input:invalid:focus-within,
.validate .input:has(:invalid):focus,
.validate .input:has(:invalid):focus-within,
.select.is-invalid:focus,
.select.is-invalid:focus-within,
.select:has(.is-invalid):focus,
.select:has(.is-invalid):focus-within,
.validate .select:invalid:focus,
.validate .select:invalid:focus-within,
.validate .select:has(:invalid):focus,
.validate .select:has(:invalid):focus-within,
.textarea.is-invalid:focus,
.textarea.is-invalid:focus-within,
.textarea:has(.is-invalid):focus,
.textarea:has(.is-invalid):focus-within,
.validate .textarea:invalid:focus,
.validate .textarea:invalid:focus-within,
.validate .textarea:has(:invalid):focus,
.validate .textarea:has(:invalid):focus-within {
  --input-color: var(--color-error);
}

.switch.is-valid,
.switch:has(.is-valid),
.validate .switch:valid,
.validate .switch:has(:valid),
.checkbox.is-valid,
.checkbox:has(.is-valid),
.validate .checkbox:valid,
.validate .checkbox:has(:valid),
.radio.is-valid,
.radio:has(.is-valid),
.validate .radio:valid,
.validate .radio:has(:valid),
.radio-inset.is-valid,
.radio-inset:has(.is-valid),
.validate .radio-inset:valid,
.validate .radio-inset:has(:valid) {
  --input-color: var(--color-success);
  border-color: var(--input-color);
}

.switch.is-valid:checked,
.switch.is-valid[aria-checked="true"],
.switch.is-valid:has(> input:checked),
.switch:has(.is-valid):checked,
.switch:has(.is-valid)[aria-checked="true"],
.switch:has(.is-valid):has(> input:checked),
.validate .switch:valid:checked,
.validate .switch:valid[aria-checked="true"],
.validate .switch:valid:has(> input:checked),
.validate .switch:has(:valid):checked,
.validate .switch:has(:valid)[aria-checked="true"],
.validate .switch:has(:valid):has(> input:checked),
.checkbox.is-valid:checked,
.checkbox.is-valid[aria-checked="true"],
.checkbox.is-valid:has(> input:checked),
.checkbox:has(.is-valid):checked,
.checkbox:has(.is-valid)[aria-checked="true"],
.checkbox:has(.is-valid):has(> input:checked),
.validate .checkbox:valid:checked,
.validate .checkbox:valid[aria-checked="true"],
.validate .checkbox:valid:has(> input:checked),
.validate .checkbox:has(:valid):checked,
.validate .checkbox:has(:valid)[aria-checked="true"],
.validate .checkbox:has(:valid):has(> input:checked),
.radio.is-valid:checked,
.radio.is-valid[aria-checked="true"],
.radio.is-valid:has(> input:checked),
.radio:has(.is-valid):checked,
.radio:has(.is-valid)[aria-checked="true"],
.radio:has(.is-valid):has(> input:checked),
.validate .radio:valid:checked,
.validate .radio:valid[aria-checked="true"],
.validate .radio:valid:has(> input:checked),
.validate .radio:has(:valid):checked,
.validate .radio:has(:valid)[aria-checked="true"],
.validate .radio:has(:valid):has(> input:checked),
.radio-inset.is-valid:checked,
.radio-inset.is-valid[aria-checked="true"],
.radio-inset.is-valid:has(> input:checked),
.radio-inset:has(.is-valid):checked,
.radio-inset:has(.is-valid)[aria-checked="true"],
.radio-inset:has(.is-valid):has(> input:checked),
.validate .radio-inset:valid:checked,
.validate .radio-inset:valid[aria-checked="true"],
.validate .radio-inset:valid:has(> input:checked),
.validate .radio-inset:has(:valid):checked,
.validate .radio-inset:has(:valid)[aria-checked="true"],
.validate .radio-inset:has(:valid):has(> input:checked) {
  --input-color: var(--color-success);
}

.switch.is-invalid,
.switch:has(.is-invalid),
.validate .switch:invalid,
.validate .switch:has(:invalid),
.checkbox.is-invalid,
.checkbox:has(.is-invalid),
.validate .checkbox:invalid,
.validate .checkbox:has(:invalid),
.radio.is-invalid,
.radio:has(.is-invalid),
.validate .radio:invalid,
.validate .radio:has(:invalid),
.radio-inset.is-invalid,
.radio-inset:has(.is-invalid),
.validate .radio-inset:invalid,
.validate .radio-inset:has(:invalid) {
  --input-color: var(--color-error);
  border-color: var(--input-color);
}

.switch.is-invalid:checked,
.switch.is-invalid[aria-checked="true"],
.switch.is-invalid:has(> input:checked),
.switch:has(.is-invalid):checked,
.switch:has(.is-invalid)[aria-checked="true"],
.switch:has(.is-invalid):has(> input:checked),
.validate .switch:invalid:checked,
.validate .switch:invalid[aria-checked="true"],
.validate .switch:invalid:has(> input:checked),
.validate .switch:has(:invalid):checked,
.validate .switch:has(:invalid)[aria-checked="true"],
.validate .switch:has(:invalid):has(> input:checked),
.checkbox.is-invalid:checked,
.checkbox.is-invalid[aria-checked="true"],
.checkbox.is-invalid:has(> input:checked),
.checkbox:has(.is-invalid):checked,
.checkbox:has(.is-invalid)[aria-checked="true"],
.checkbox:has(.is-invalid):has(> input:checked),
.validate .checkbox:invalid:checked,
.validate .checkbox:invalid[aria-checked="true"],
.validate .checkbox:invalid:has(> input:checked),
.validate .checkbox:has(:invalid):checked,
.validate .checkbox:has(:invalid)[aria-checked="true"],
.validate .checkbox:has(:invalid):has(> input:checked),
.radio.is-invalid:checked,
.radio.is-invalid[aria-checked="true"],
.radio.is-invalid:has(> input:checked),
.radio:has(.is-invalid):checked,
.radio:has(.is-invalid)[aria-checked="true"],
.radio:has(.is-invalid):has(> input:checked),
.validate .radio:invalid:checked,
.validate .radio:invalid[aria-checked="true"],
.validate .radio:invalid:has(> input:checked),
.validate .radio:has(:invalid):checked,
.validate .radio:has(:invalid)[aria-checked="true"],
.validate .radio:has(:invalid):has(> input:checked),
.radio-inset.is-invalid:checked,
.radio-inset.is-invalid[aria-checked="true"],
.radio-inset.is-invalid:has(> input:checked),
.radio-inset:has(.is-invalid):checked,
.radio-inset:has(.is-invalid)[aria-checked="true"],
.radio-inset:has(.is-invalid):has(> input:checked),
.validate .radio-inset:invalid:checked,
.validate .radio-inset:invalid[aria-checked="true"],
.validate .radio-inset:invalid:has(> input:checked),
.validate .radio-inset:has(:invalid):checked,
.validate .radio-inset:has(:invalid)[aria-checked="true"],
.validate .radio-inset:has(:invalid):has(> input:checked) {
  --input-color: var(--color-error);
}

.input.is-valid::file-selector-button,
.validate .input:valid::file-selector-button {
  background-color: var(--color-success);
  color: var(--color-success-content);
  --input-color: var(--color-success);
}

.input.is-invalid::file-selector-button,
.validate .input:invalid::file-selector-button {
  background-color: var(--color-error);
  color: var(--color-error-content);
  --input-color: var(--color-error);
}

.input-floating>.input.is-valid::file-selector-button,
.validate .input-floating>.input:valid::file-selector-button {
  background-color: var(--color-base-100);
  color: var(--color-base-content);
  border-inline-end: var(--border) solid var(--color-success);
}

.input-floating>.input.is-invalid::file-selector-button,
.validate .input-floating>.input:invalid::file-selector-button {
  background-color: var(--color-base-100);
  color: var(--color-base-content);
  border-inline-end: var(--border) solid var(--color-error);
}

.input-floating:has(.is-valid):focus-within .input-floating-label,
.input-floating:has(.is-valid):not(:has(input:placeholder-shown)) .input-floating-label,
.input-floating:has(.is-valid):has(.input:focus) .input-floating-label,
.validate .input-floating:has(:valid):focus-within .input-floating-label,
.validate .input-floating:has(:valid):not(:has(input:placeholder-shown)) .input-floating-label,
.validate .input-floating:has(:valid):has(.input:focus) .input-floating-label {
  color: var(--color-success);
}

.input-floating:has(.is-invalid):focus-within .input-floating-label,
.input-floating:has(.is-invalid):not(:has(input:placeholder-shown)) .input-floating-label,
.input-floating:has(.is-invalid):has(.input:focus) .input-floating-label,
.validate .input-floating:has(:invalid):focus-within .input-floating-label,
.validate .input-floating:has(:invalid):not(:has(input:placeholder-shown)) .input-floating-label,
.validate .input-floating:has(:invalid):has(.input:focus) .input-floating-label {
  color: var(--color-error);
}

@keyframes skeleton {
  0% {
    background-position: 150%;
  }

  100% {
    background-position: -50%;
  }
}

.loading {
  pointer-events: none;
  display: inline-block;
  aspect-ratio: 1 / 1;
  background-color: currentColor;
  vertical-align: middle;
  width: calc(var(--size-selector, 0.25rem) * 6);
  -webkit-mask-size: 100%;
  mask-size: 100%;
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-position: center;
  mask-position: center;
  -webkit-mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
}

.loading-infinity {
  -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering: auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='%230a0a0a' stroke-width='10' stroke-dasharray='205.271142578125 51.317785644531256' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.58892822265625'%3E%3C/animate%3E%3C/path%3E%3C/svg%3E");
  mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering: auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='%230a0a0a' stroke-width='10' stroke-dasharray='205.271142578125 51.317785644531256' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.58892822265625'%3E%3C/animate%3E%3C/path%3E%3C/svg%3E");
}

.loading-lg {
  width: calc(var(--size-selector, 0.25rem) * 7);
}

.input {
  display: inline-flex;
  width: 100%;
  flex-shrink: 1;
  cursor: text;
  appearance: none;
  background-color: var(--color-base-100);
  padding-inline: calc(0.25rem * 3);
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  --tw-font-weight: var(--font-weight-normal);
  font-weight: var(--font-weight-normal);
  color: var(--color-base-content);
}

.input::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
}

.input:focus-visible {
  --tw-outline-style: none;
  outline-style: none;
}

.input {
  border: var(--border) solid #0000;
  height: var(--size);
  touch-action: manipulation;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-color: var(--input-color);
  --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
  --size: calc(var(--size-field, 0.25rem) * 9.5);
}

.input:hover:not(:focus, :focus-within),
.input:has(:hover):not(:focus, :focus-within) {
  border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
}

.input:where(input) {
  display: inline-block;
}

.input :where(input:not([type="checkbox"]):not([type="radio"])) {
  display: inline-block;
  height: 100%;
  width: 100%;
  appearance: none;
  background-color: transparent;
  border: none;
}

.input :where(input:not([type="checkbox"]):not([type="radio"])):focus,
.input :where(input:not([type="checkbox"]):not([type="radio"])):focus-within,
.input :where(input:not([type="checkbox"]):not([type="radio"])):focus-visible {
  --tw-outline-style: none;
  outline-style: none;
}

.input:focus,
.input:focus-within {
  --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  --input-color: var(--color-primary);
  --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
  outline: 1px solid var(--input-color);
  isolation: isolate;
}

.input:has(> input[disabled]),
.input:is(:disabled, [disabled]) {
  cursor: not-allowed;
  border-style: var(--tw-border-style);
  border-width: 0px;
  background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
  box-shadow: none;
}

.input:has(> input[disabled])>input[disabled] {
  cursor: not-allowed;
}

.input::-webkit-date-and-time-value {
  text-align: inherit;
}

.input[type="number"]::-webkit-inner-spin-button {
  margin-block: calc(0.25rem * -3);
  margin-inline-end: calc(0.25rem * -3);
}

.input:has(> .input-floating) input::placeholder {
  color: transparent;
}

.input:has(> .input-floating) input:focus::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
}

.input-floating .input::placeholder {
  color: transparent;
}

.input-floating .input:focus::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
}

.input-floating .input:has(> input[disabled]),
.input-floating .input:is(:disabled, [disabled]) {
  border-style: var(--tw-border-style);
  border-width: 1px;
  background-color: transparent;
  opacity: 50%;
}

.input-floating .input:has(> input[disabled])~.input-floating-label,
.input-floating .input:is(:disabled, [disabled])~.input-floating-label {
  color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
}

.input-floating:focus-within .input-floating-label,
.input-floating:not(:has(input:placeholder-shown)) .input-floating-label,
.input-floating:has(.input:focus) .input-floating-label {
  pointer-events: auto;
  top: calc(0.25rem * 0);
  background-color: var(--color-base-100);
  padding-inline: calc(0.25rem * 1);
  --tw-font-weight: var(--font-weight-medium);
  font-weight: var(--font-weight-medium);
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
  translate: -12.5% calc(-50% - 0.125em);
  scale: 0.75;
}

.input-floating:focus-within .input-floating-label,
.input-floating:has(.input:focus) .input-floating-label {
  --input-color: var(--color-primary);
  color: var(--input-color);
}

.input::file-selector-button {
  margin-inline-end: calc(0.25rem * 4);
  display: inline-flex;
  height: 100%;
  flex-shrink: 0;
  cursor: pointer;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  border-style: var(--tw-border-style);
  border-width: 0px;
  background-color: var(--color-primary);
  padding-inline: calc(0.25rem * 4);
  text-align: center;
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  line-height: 1;
  --tw-leading: 1;
  --tw-font-weight: var(--font-weight-semibold);
  font-weight: var(--font-weight-semibold);
  color: var(--color-primary-content);
  text-transform: uppercase;
  text-decoration-line: none;
  webkit-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  --input-color: var(--color-primary);
}

.input::file-selector-button.input-sm {
  font-size: var(--text-sm);
  line-height: var(--tw-leading, var(--text-sm--line-height));
}

.input::file-selector-button.input-md {
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
}

.input::file-selector-button.input-lg {
  font-size: var(--text-lg);
  line-height: var(--tw-leading, var(--text-lg--line-height));
}

.input::file-selector-button.input-xl {
  font-size: var(--text-xl);
  line-height: var(--tw-leading, var(--text-xl--line-height));
}

.input[type="file"] {
  overflow: hidden;
  padding-inline-start: calc(0.25rem * 0);
}

.input-floating .input::file-selector-button {
  background-color: var(--color-base-100);
  color: var(--color-base-content);
  border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
  outline: none;
}

.mockup-browser .mockup-browser-toolbar .input {
  position: relative;
  margin-inline: auto;
  display: block;
  height: calc(0.25rem * 7);
  width: calc(0.25rem * 96);
  overflow: hidden;
  padding-inline-start: calc(0.25rem * 8);
  padding-top: calc(0.25rem * 0.5);
  text-overflow: ellipsis;
  white-space: nowrap;
}

.mockup-browser .mockup-browser-toolbar .input:before {
  content: "";
  position: absolute;
  inset-inline-start: calc(0.25rem * 2);
  top: calc(1/2 * 100%);
  aspect-ratio: 1 / 1;
  height: calc(0.25rem * 3);
  --tw-translate-y: calc(calc(1/2 * 100%) * -1);
  translate: var(--tw-translate-x) var(--tw-translate-y);
  border-radius: calc(infinity * 1px);
  border-style: var(--tw-border-style);
  border-width: 2px;
  border-color: currentColor;
  opacity: 60%;
}

.mockup-browser .mockup-browser-toolbar .input:after {
  content: "";
  position: absolute;
  inset-inline-start: calc(0.25rem * 5);
  top: calc(1/2 * 100%);
  height: calc(0.25rem * 2);
  --tw-translate-y: calc(1/4 * 100%);
  translate: var(--tw-translate-x) var(--tw-translate-y);
  rotate: calc(45deg * -1);
  border-radius: calc(infinity * 1px);
  border-style: var(--tw-border-style);
  border-width: 1px;
  border-color: currentColor;
  opacity: 60%;
}

.fixed {
  position: fixed;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.inset-0 {
  inset: 0px;
}

.inset-y-0 {
  top: 0px;
  bottom: 0px;
}

.right-0 {
  right: 0px;
}

.z-50 {
  z-index: 50;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.mb-2 {
  margin-bottom: 0.5rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.mb-6 {
  margin-bottom: 1.5rem;
}

.mb-8 {
  margin-bottom: 2rem;
}

.mr-2 {
  margin-right: 0.5rem;
}

.mt-10 {
  margin-top: 2.5rem;
}

.block {
  display: block;
}

.flex {
  display: flex;
}

.min-h-screen {
  min-height: 100vh;
}

.w-full {
  width: 100%;
}

.max-w-sm {
  max-width: 24rem;
}

.appearance-none {
  appearance: none;
}

.flex-col {
  flex-direction: column;
}

.items-start {
  align-items: flex-start;
}

.items-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.border {
  border-width: 1px;
}

.bg-black {
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity));
}

.bg-blue-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity));
}

.bg-gray-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity));
}

.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}

.bg-white\/50 {
  background-color: rgb(255 255 255 / 0.5);
}

.bg-opacity-50 {
  --tw-bg-opacity: 0.5;
}

.p-4 {
  padding: 1rem;
}

.p-8 {
  padding: 2rem;
}

.px-3 {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.pr-3 {
  padding-right: 0.75rem;
}

.text-center {
  text-align: center;
}

.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.text-xl {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.font-bold {
  font-weight: 700;
}

.leading-5 {
  line-height: 1.25rem;
}

.leading-tight {
  line-height: 1.25;
}

.text-gray-600 {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity));
}

.text-gray-700 {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity));
}

.text-gray-800 {
  --tw-text-opacity: 1;
  color: rgb(31 41 55 / var(--tw-text-opacity));
}

.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}

.shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-xl {
  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.backdrop-blur-sm {
  --tw-backdrop-blur: blur(4px);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

/* Preline */

@custom-variant dropdown-open {
  &.dropdown-menu.open {
    @slot;
  }

  .dropdown.open>& {
    @slot;
  }

  .dropdown.open>.dropdown-toggle & {
    @slot;
  }

  .dropdown.open>.dropdown-menu>& {
    @slot;
  }
}

@custom-variant dropdown-item-disabled {
  .dropdown.open>.dropdown-menu &.disabled {
    @slot;
  }
}

@custom-variant dropdown-item-checked {
  .dropdown.open .dropdown-menu [aria-checked="true"] & {
    @slot;
  }

  .dropdown.open .dropdown-menu &[aria-checked="true"] {
    @slot;
  }
}

@custom-variant removing {
  &.removing {
    @slot;
  }
}

@custom-variant tooltip-shown {
  &.tooltip-content.show {
    @slot;
  }

  .tooltip.show & {
    @slot;
  }
}

@custom-variant accordion-item-active {
  &.accordion-item.active {
    @slot;
  }

  .accordion-item.active>& {
    @slot;
  }

  .accordion-item.active>.accordion-toggle & {
    @slot;
  }

  .accordion-item.active>.accordion-heading>.accordion-toggle & {
    @slot;
  }

  &.accordion-toggle {
    .accordion-item.active>& {
      @slot;
    }

    .accordion-item.active>.accordion-heading>& {
      @slot;
    }
  }

  &.accordion-force-active {
    .accordion-item.active & {
      @slot;
    }
  }
}

@custom-variant accordion-selected {
  &.selected {
    .accordion-item & {
      @slot;
    }
  }
}

@custom-variant accordion-outside-active {
  &.active {
    @slot;
  }
}

@custom-variant tree-view-selected {
  &[data-tree-view-item].selected {
    @slot;
  }

  [data-tree-view-item].selected>& {
    @slot;
  }
}

@custom-variant tree-view-disabled {
  &[data-tree-view-item].disabled {
    @slot;
  }

  [data-tree-view-item].disabled>& {
    @slot;
  }
}

@custom-variant collapse-open {
  &.collapse.open {
    @slot;
  }

  &.collapse-toggle.open {
    @slot;
  }

  .collapse.open>& {
    @slot;
  }

  .collapse-toggle.open>& {
    @slot;
  }
}

@custom-variant active-tab {
  &[data-tab].active {
    @slot;
  }

  [data-tab].active & {
    @slot;
  }
}

@custom-variant overlay-open {
  &.open {
    @slot;
  }

  .open & {
    @slot;
  }
}

@custom-variant overlay-layout-open {
  &.overlay-body-open {
    @slot;
  }

  .overlay-body-open & {
    @slot;
  }
}

@custom-variant overlay-minified {
  &.minified {
    @slot;
  }

  .minified & {
    @slot;
  }

  .overlay-minified & {
    @slot;
  }
}

@custom-variant overlay-backdrop-open {
  &.overlay-backdrop {
    @slot;
  }

  .overlay-backdrop & {
    @slot;
  }
}

@custom-variant scrollspy-active {
  &.active {
    @slot;
  }
}

@custom-variant carousel-active {
  &.active {
    @slot;
  }

  .active & {
    @slot;
  }
}

@custom-variant carousel-disabled {
  &.disabled {
    @slot;
  }

  .disabled & {
    @slot;
  }
}

@custom-variant carousel-dragging {
  &.dragging {
    @slot;
  }

  .dragging & {
    @slot;
  }
}

@custom-variant selected {
  &.selected {
    @slot;
  }

  .selected & {
    @slot;
  }
}

@custom-variant select-disabled {
  &.disabled {
    @slot;
  }

  .disabled & {
    @slot;
  }
}

@custom-variant select-active {
  &.active {
    @slot;
  }

  .active & {
    @slot;
  }
}

@custom-variant select-opened {
  &.opened {
    @slot;
  }
}

@custom-variant input-number-disabled {
  &.disabled {
    @slot;
  }

  .disabled & {
    @slot;
  }
}

@custom-variant pin-input-active {
  &.active {
    @slot;
  }

  .active & {
    @slot;
  }
}

@custom-variant password-active {
  &.active {
    @slot;
  }

  .active & {
    @slot;
  }
}

@custom-variant strong-password {
  &.passed {
    @slot;
  }

  .passed & {
    @slot;
  }
}

@custom-variant strong-password-accepted {
  &.accepted {
    @slot;
  }

  .accepted & {
    @slot;
  }
}

@custom-variant strong-password-active {
  &.active {
    @slot;
  }
}

@custom-variant stepper-active {
  &.active {
    @slot;
  }

  .active & {
    @slot;
  }
}

@custom-variant stepper-success {
  &.is-valid {
    @slot;
  }

  .is-valid & {
    @slot;
  }
}

@custom-variant stepper-completed {
  &.completed {
    @slot;
  }

  .completed & {
    @slot;
  }
}

@custom-variant stepper-error {
  &.is-invalid {
    @slot;
  }

  .is-invalid & {
    @slot;
  }
}

@custom-variant stepper-processed {
  &.processed {
    @slot;
  }

  .processed & {
    @slot;
  }
}

@custom-variant stepper-disabled {
  &.disabled {
    @slot;
  }

  .disabled & {
    @slot;
  }
}

@custom-variant stepper-skipped {
  &.skipped {
    @slot;
  }

  .skipped & {
    @slot;
  }
}

@custom-variant combo-box-active {
  &.active {
    @slot;
  }

  .active & {
    @slot;
  }
}

@custom-variant combo-box-has-value {
  &.has-value {
    @slot;
  }

  .has-value & {
    @slot;
  }
}

@custom-variant combo-box-selected {
  &.selected {
    @slot;
  }

  .selected & {
    @slot;
  }
}

@custom-variant combo-box-tab-active {
  &.active {
    @slot;
  }
}

@custom-variant datatable-ordering-asc {
  &.dt-ordering-asc {
    @slot;
  }

  .dt-ordering-asc & {
    @slot;
  }
}

@custom-variant datatable-ordering-desc {
  &.dt-ordering-desc {
    @slot;
  }

  .dt-ordering-desc & {
    @slot;
  }
}

@custom-variant range-slider-disabled {
  &.disabled {
    @slot;
  }

  .disabled & {
    @slot;
  }
}

@custom-variant file-upload-complete {
  &.complete {
    @slot;
  }

  .complete & {
    @slot;
  }
}

/* Sortable.js */

@custom-variant dragged {
  &.dragged {
    @slot;
  }
}

/* States */

@custom-variant success {
  &.success {
    @slot;
  }

  .success & {
    @slot;
  }
}

@custom-variant error {
  &.error {
    @slot;
  }

  .error & {
    @slot;
  }
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.hover\:bg-blue-700:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity));
}

.focus\:border-transparent:focus {
  border-color: transparent;
}

.focus\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.focus\:ring-2:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.focus\:ring-blue-500:focus {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));
}

.focus\:ring-opacity-50:focus {
  --tw-ring-opacity: 0.5;
}

@media (min-width: 768px) {
  .md\:flex-row {
    flex-direction: row;
  }

  .md\:space-y-3> :not([hidden])~ :not([hidden]) {
    --tw-space-y-reverse: 0;
    margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));
    margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));
  }
}